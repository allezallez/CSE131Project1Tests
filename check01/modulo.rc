function : void mod() {
    int i;
    float f;
    bool b;

    //int % int, good
    i%i;
    i%-01;
    1%-i;
    1%0x3;

    //int % int, bad
    //here I use && to make sure the return type is printed as int
    (i%i) && true; //FAIL, int in &&
    (i%-1) && true; //FAIL, int in &&
    (1%-i) && true; //FAIL, int in &&
    (1%3) && true; //FAIL, int in &&

    //floats, bad
    f%i; //FAIL, float in %
    i%f; //FAIL, float in %
    i%-1.0; //FAIL, float in %
    1.0%-i; //FAIL, float in %
    1%f; //FAIL, float in %
    f%1; //FAIL, float in %
    +f%1.0; //FAIL, float in %
    -1.0%-f; //FAIL, float in %
    f%f; //FAIL, float in %
    1.0%+0x1F; //FAIL, float in %

    //bools, bad
    b%i; //FAIL, bool in %
    i%b; //FAIL, bool in %
    i%true; //FAIL, bool in %
    false%i; //FAIL, bool in %
    1%b; //FAIL, bool in %
    b%1; //FAIL, bool in %
    true%1; //FAIL, bool in %
    1%false; //FAIL, bool in %
    b%false; //FAIL, bool in %
    true%b; //FAIL, bool in %
    b%b; //FAIL, bool in %
    false%true; //FAIL, bool in %

    //mixed, take first error
    b%f; //FAIL, bool in %
    b%-1.45;//FAIL, bool in %
    true%f;//FAIL, bool in %
    false%+2.7;//FAIL, bool in %
    f%b; //FAIL, float in %
    -1.45%b; //FAIL, float in %
    f%true; //FAIL, float in %
    +2.7%false; //FAIL, float in %
}
