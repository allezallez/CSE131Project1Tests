typedef int INTEGER;
typedef int MONTH;
INTEGER i;
MONTH m;
float r;
structdef REC1 { float a; };
structdef REC2 { float a; };
typedef REC1 REC3;
REC1 r1;
REC2 r2;
REC3 r3;
function : int f(REC1 &a) { /* stuff */ }
float[5] a1;
int[5] a2;
function : int g(float[5] &a) { /* stuff */ }
int* p1;
INTEGER* p2;
REC1* p3;
REC2* p4;
REC3* p5;

function : int main() {
    i = m; // okay, assignable â€“ loose name equivalent
    i = r; // error, not assignable - float cannot be assigned to int
    // Error Message: error3b_Assign
    r = i; // okay, assignable - int can be assigned to float (coercion)
    f(r1); // okay, same type/strict name equivalent
    f(r2); // error, not strict name equivalent
    // Error Message: error5r_Call
    f(r3); // okay, same type/loose name equivalent typedef then
    // strict name equivalent on the struct types
    g(a1); // okay, structurally equivalent
    g(a2); // error, not structurally equivalent
    // Error Message: error5r_Call
    a1 = a1; // error, arrays are not modifiable L-vals
    // Error Message: error3a_Assign
    r1 = r1; // okay, strict name equiv & struct variables are mod L-vals
    r1 = r2; // error, not strict name equivalent
    // Error Message: error3b_Assign
    r3 = r1; // okay, loose name equivalent typedef then strict name
    // equiv on the struct types & struct variables are mod L-vals
    p1 = p2; // okay, types pointed to are structurally equivalent
    p3 = p4; // error, types pointed to (structs) are not strict name equiv
    // Error Message: error3b_Assign
    p3 = p5; // okay, types pointed to (structs) are strict name equivalent
    return 0;
}

